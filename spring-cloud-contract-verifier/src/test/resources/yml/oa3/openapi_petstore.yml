openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      # Define Contracts
      x-contracts:
        - contractId: 1
          name: Test List All Pets, No Limit
          requestHeaders:
            - Content-type: application/json
          serviceName: serviceA
        - contractId: 2
          name: Test List All Pets, Limit 5
          requestHeaders:
            - Content-type: application/json
          serviceName: serviceB
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
          # Define Parameters for Contracts
          x-contracts:
            - contractId: 1
              value: null
            - contractId: 2
              value: 5
      responses:
        '200':
          description: An paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
          #Define Expectations for Contracts (expecting 200, application/json response and below conditions)
          x-contracts:
            - contractId: 1
              matchers:
                    path: $.*
                    maxOccurance: 25
            - contractId: 2
              matchers:
                    path: $.*
                    maxOccurance: 25
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: addPet
      # Define Contracts
      x-contracts:
        - contractId: 1
          name: Test Create Pet
          serviceName: serviceC
          requestHeaders:
            - Content-type: application/json
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
        x-contracts:
            - contractId: 1
              body:
                name: Jake
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string