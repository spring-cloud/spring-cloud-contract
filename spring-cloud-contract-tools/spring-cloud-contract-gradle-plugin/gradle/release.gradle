apply plugin: 'maven-publish'
apply plugin: 'signing'

publish.dependsOn(check)

java {
	withSourcesJar()
	withJavadocJar()
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
	classifier 'groovydoc'
	from groovydoc.destinationDir
}

assemble.dependsOn(groovydocJar)

ext {
	resolveRepoName = { Project project ->
		resolvedRepoName = "libs-${resolveVersion(project.version)}-local"
		logger.lifecycle("For project [$project.name] with " +
				"version [$project.version] the resolved Artifactory repo is [$resolvedRepoName]")
		return resolvedRepoName
	}

	isReleaseVersion = version.endsWith("RELEASE")
	isMilestoneVersion = version.matches('[0-9].[0-9].[0-9].M[0-9]+') || version.matches('[0-9].[0-9].[0-9].RC[0-9]+')
	isSnapshotVersion = !(isReleaseVersion || isMilestoneVersion)
	isReleaseToCentral = project.hasProperty('central')

	resolveVersion = { String version ->
		if (isMilestoneVersion) {
			return 'milestone'
		}
		if (isReleaseVersion) {
			return 'release'
		}
		return 'snapshot'
	}

	repoUrl = isReleaseToCentral ?
			"https://oss.sonatype.org/service/local/staging/deploy/maven2/" :
			"https://repo.spring.io/${resolveRepoName(project)}"
	repoUserName = isReleaseToCentral ? getProp("SONATYPE_USER") : repoUser
	repoPass = isReleaseToCentral ? getProp("SONATYPE_PASSWORD") : repoPass
}

publishing {
	repositories {
		maven {
			url = repoUrl
			credentials {
				username = repoUserName
				password = repoPass
			}
		}
	}
	publications {
		pluginMaven(MavenPublication) {
			artifact groovydocJar
			pom {
				name = project.name
				packaging = 'jar'
				description = 'Spring Cloud Contract Gradle Plugin'
				url = 'https://github.com/spring-cloud/spring-cloud-contract'
				inceptionYear = '2014'

				scm {
					connection = 'scm:git:git@github.com:spring-cloud/spring-cloud-contract.git'
					developerConnection = 'scm:git:git@github.com:spring-cloud/spring-cloud-contract.git'
					url = 'https://github.com/spring-cloud/spring-cloud-contract'
				}

				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}

				developers {
					developer {
						id = 'jkubrynski'
						name = 'Jakub Kubrynski'
						email = 'jk ATT codearte DOTT io'
					}
					developer {
						id = 'marcingrzejszczak'
						name = 'Marcin Grzejszczak'
						email = 'mgrzejszczak ATT pivotal DOTT io'
					}
					developer {
						id = 'dsyer'
						name = 'Dave Syer'
						email = 'dsyer ATT pivotal DOTT io'
					}
				}
			}
		}
	}
}

if (isReleaseToCentral) {
	signing {
		sign publishing.publications.maven
	}

	apply plugin: 'com.gradle.plugin-publish'

	pluginBundle {
		website = 'https://github.com/spring-cloud/spring-cloud-contract'
		vcsUrl = 'https://github.com/spring-cloud/spring-cloud-contract'

		plugins {
			plugin {
				id = 'org.springframework.cloud.contract'
				displayName = 'spring-cloud-contract'
				description = 'Spring Cloud Contract Gradle Plugin'
				tags = ['spring', 'spring-framework', 'spring-cloud', 'spring-cloud-contract']
			}
		}

		mavenCoordinates {
			groupId = project.group
			artifactId = project.name
		}
	}
}

String getProp(String propName) {
	return (findProperty(propName) ?: System.properties[propName]) ?: System.getenv(propName)
}
